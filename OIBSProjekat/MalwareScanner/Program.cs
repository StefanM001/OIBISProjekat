using Common;
using System;
using System.Collections.Generic;
using System.ComponentModel.Design.Serialization;
using System.Linq;
using System.Net.Security;
using System.Runtime.Serialization;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics.Contracts;
using System.IdentityModel.Policy;
using System.ServiceModel.Security;
using Manager;
using Formatter = Manager.Formatter;

namespace MalwareScanner
{
    internal class Program
    {
        static void Main(string[] args)
        {
            using (ServiceHost host = new ServiceHost(typeof(MalwareScannerServis)))
            {
                string address = "net.tcp://localhost:4000/IChangeConfig";
                string address2 = "net.tcp://localhost:4001/IMalwareScanning";
                NetTcpBinding binding = new NetTcpBinding();

                binding.Security.Mode = SecurityMode.Transport;
                binding.Security.Transport.ClientCredentialType =
                TcpClientCredentialType.Windows;
                binding.Security.Transport.ProtectionLevel =
                ProtectionLevel.EncryptAndSign;

                host.AddServiceEndpoint(typeof(IChangeConfig), binding, address);



                NetTcpBinding binding2 = new NetTcpBinding();
                binding2.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

                host.AddServiceEndpoint(typeof(IMalwareScanning), binding2, address2);


                string srvCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);

                host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.ChainTrust;

                ///If CA doesn't have a CRL associated, WCF blocks every client because it cannot be validated
                host.Credentials.ClientCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

                ///Set appropriate service's certificate on the host. Use CertManager class to obtain the certificate based on the "srvCertCN"
                host.Credentials.ServiceCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, "wcfservice");

                host.Authorization.ServiceAuthorizationManager = new CustomAuthorizationManager();
                host.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.Custom;
                List<IAuthorizationPolicy> policies = new List<IAuthorizationPolicy>();
                policies.Add(new CustomAuthorizationPolicy());
                host.Authorization.ExternalAuthorizationPolicies = policies.AsReadOnly();

                host.Open();
                Console.WriteLine(WindowsIdentity.GetCurrent().Name);
                Console.WriteLine($"Servis je uspesno pokrenut na endpoint adresama : {address} and {address2}");

                Console.WriteLine();
                Console.ReadKey();
                host.Close();
            }
        }
    }
}
