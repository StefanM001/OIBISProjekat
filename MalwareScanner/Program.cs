using Common;
using Manager;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.IdentityModel.Policy;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.ServiceModel.Security;
using Formatter = Manager.Formatter;
using System.Threading;
using System.ServiceModel.Channels;

namespace MalwareScanner
{
    internal class Program
    {
        static void Main(string[] args)
        { 
            using (ServiceHost host2 = new ServiceHost(typeof(ChangeConfigServis)))
            {
                #region ConnectionWithClient

                string address = "net.tcp://localhost:4000/IChangeConfig";

                NetTcpBinding binding = new NetTcpBinding();

                binding.Security.Mode = SecurityMode.Transport;
                binding.Security.Transport.ClientCredentialType =
                TcpClientCredentialType.Windows;
                binding.Security.Transport.ProtectionLevel =
                ProtectionLevel.EncryptAndSign;

                host2.AddServiceEndpoint(typeof(IChangeConfig), binding, address);

                host2.Description.Behaviors.Remove(typeof(ServiceDebugBehavior));
                host2.Description.Behaviors.Add(new ServiceDebugBehavior() { IncludeExceptionDetailInFaults = true });

                host2.Authorization.ServiceAuthorizationManager = new CustomAuthorizationManager();
                host2.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.Custom;
                List<IAuthorizationPolicy> policies = new List<IAuthorizationPolicy>();
                policies.Add(new CustomAuthorizationPolicy());
                host2.Authorization.ExternalAuthorizationPolicies = policies.AsReadOnly();

                // TO DO : podesavanje AutidBehaviour-a
                ServiceSecurityAuditBehavior newAudit2 = new ServiceSecurityAuditBehavior();
                newAudit2.AuditLogLocation = AuditLogLocation.Application;
                newAudit2.ServiceAuthorizationAuditLevel = AuditLevel.SuccessOrFailure;

                host2.Description.Behaviors.Remove<ServiceSecurityAuditBehavior>();
                host2.Description.Behaviors.Add(newAudit2);

                host2.Open();
                Console.WriteLine("Servis je uspesno pokrenut na adresi " + address);

                #endregion ConnectionWithClient

                #region ConnectionWithIDS

                NetTcpBinding binding2 = new NetTcpBinding();
                binding2.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

                string srvCertCN = "wcfservice";

                X509Certificate2 srvCert = CertManager.GetCertificateFromStorage(StoreName.TrustedPeople, StoreLocation.LocalMachine, srvCertCN);
                EndpointAddress address2 = new EndpointAddress(new Uri("net.tcp://localhost:4001/IIDS"),
                                          new X509CertificateEndpointIdentity(srvCert));
;

                ChannelFactory<IIDS> channel = new ChannelFactory<IIDS>(binding2, address2);

                string cltCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name.ToLower());

                channel.Credentials.ServiceCertificate.Authentication.CertificateValidationMode = System.ServiceModel.Security.X509CertificateValidationMode.ChainTrust;
                channel.Credentials.ServiceCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;
                channel.Credentials.ClientCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, cltCertCN);

                Console.WriteLine(WindowsIdentity.GetCurrent().Name);

                /// Use CertManager class to obtain the certificate based on the "srvCertCN" representing the expected service identity.

                IIDS proxy = channel.CreateChannel();

                X509Certificate2 certificateSign = CertManager.GetCertificateFromStorage(StoreName.My,
                       StoreLocation.LocalMachine, "wcfclient_sign");


                //byte[] signature = DigitalSignature.Create(message, HashAlgorithm.SHA1, certificateSign);

                Console.WriteLine(WindowsIdentity.GetCurrent().Name);

                #endregion ConnectionWithIDS

                #region FindProccesses
                ProccesesDB Procesi = new ProccesesDB();

                Thread t = new Thread(() => Menu(proxy));
                t.Start();

                while (true)
                {
                    CheckForBlackListedProccesses(Procesi, certificateSign, proxy);
                    Thread.Sleep(3000);
                }
                #endregion FindProccesses

                Console.WriteLine();
                Console.ReadKey();
                host2.Close();
            }
        }

        #region MethodsUsedInMain
        public static void CheckForBlackListedProccesses(ProccesesDB Procesi, X509Certificate2 certificateSign, IIDS proxy)
        {
            try
            {
                Procesi.LoadProcesses();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            Process[] activeProcesses = Process.GetProcesses();
            foreach (Process p in activeProcesses)
            {
                KeyValuePair<string, CounterAndType> matchingEntry = ProccesesDB.blackListProccesses.FirstOrDefault(entry => p.ProcessName.ToLower().Contains(entry.Key.ToLower()));

                if (!string.IsNullOrEmpty(matchingEntry.Key))
                {
                    ProccesesDB.blackListProccesses[matchingEntry.Key].Counter++;
                    if (ProccesesDB.blackListProccesses[matchingEntry.Key].LevelOfSecurity < LevelOfSecurity.Critical)
                    {
                        ProccesesDB.blackListProccesses[matchingEntry.Key].LevelOfSecurity++;
                    }

                    if (ProccesesDB.blackListProccesses[matchingEntry.Key].LevelOfSecurity == LevelOfSecurity.Critical)
                    {
                        Audit.ProcessCritical(p.ProcessName, DateTime.Now, ProccesesDB.blackListProccesses[matchingEntry.Key].Counter);
                    }


                    string message = (new Alarm(DateTime.Now, p.ProcessName, ProccesesDB.blackListProccesses[matchingEntry.Key].LevelOfSecurity)).ToString();
                    byte[] signature = DigitalSignature.Create(message, HashAlgorithm.SHA1, certificateSign);
                    proxy.SendMessage(message, signature);
                }
            }
        }

        public static void Menu(IIDS proxy)
        {
            string option = "";
            while (true)
            {
                Console.WriteLine("---------------------------------");
                Console.WriteLine("   Choose option: ");
                Console.WriteLine("1) Request integrity breach report");
                Console.Write("Your Option ---> ");
                option = Console.ReadLine();
                switch (option)
                {
                    case "1":
                        string report = proxy.GetIntegrityReport();
                        if (report.Equals(""))
                        {
                            Console.WriteLine("No recent integrity breaches\n");
                        }
                        else
                        {
                            Console.WriteLine(report);
                        }
                        break;
                    default:
                        Console.WriteLine("You chose an option that doesn't exist! Try again.");
                        break;
                }
            }
        }
        #endregion MethodsUsedInMain
    }
}
