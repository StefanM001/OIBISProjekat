using Common;
using Manager;
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using System.IdentityModel.Policy;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.ServiceModel.Security;
using Formatter = Manager.Formatter;
using System.Threading;

namespace MalwareScanner
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int N = 3000;

            using (ServiceHost host = new ServiceHost(typeof(MalwareScannerServis)))
            using (ServiceHost host2 = new ServiceHost(typeof(ChangeConfigServis)))
            {
                string address2 = "net.tcp://localhost:4001/IMalwareScanning";

                NetTcpBinding binding2 = new NetTcpBinding();
                binding2.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

                host.AddServiceEndpoint(typeof(IMalwareScanning), binding2, address2);

                host.Description.Behaviors.Remove(typeof(ServiceDebugBehavior));
                host.Description.Behaviors.Add(new ServiceDebugBehavior() { IncludeExceptionDetailInFaults = true });

                string srvCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);

                host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.ChainTrust;

                ///If CA doesn't have a CRL associated, WCF blocks every client because it cannot be validated
                host.Credentials.ClientCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

                ///Set appropriate service's certificate on the host. Use CertManager class to obtain the certificate based on the "srvCertCN"
                host.Credentials.ServiceCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, "wcfservice");

                ServiceSecurityAuditBehavior newAudit = new ServiceSecurityAuditBehavior();
                newAudit.AuditLogLocation = AuditLogLocation.Application;
                newAudit.ServiceAuthorizationAuditLevel = AuditLevel.SuccessOrFailure;

                host.Description.Behaviors.Remove<ServiceSecurityAuditBehavior>();
                host.Description.Behaviors.Add(newAudit);

                host.Open();
                string address = "net.tcp://localhost:4000/IChangeConfig";

                NetTcpBinding binding = new NetTcpBinding();

                binding.Security.Mode = SecurityMode.Transport;
                binding.Security.Transport.ClientCredentialType =
                TcpClientCredentialType.Windows;
                binding.Security.Transport.ProtectionLevel =
                ProtectionLevel.EncryptAndSign;

                host2.AddServiceEndpoint(typeof(IChangeConfig), binding, address);

                host2.Description.Behaviors.Remove(typeof(ServiceDebugBehavior));
                host2.Description.Behaviors.Add(new ServiceDebugBehavior() { IncludeExceptionDetailInFaults = true });

                host2.Authorization.ServiceAuthorizationManager = new CustomAuthorizationManager();
                host2.Authorization.PrincipalPermissionMode = PrincipalPermissionMode.Custom;
                List<IAuthorizationPolicy> policies = new List<IAuthorizationPolicy>();
                policies.Add(new CustomAuthorizationPolicy());
                host2.Authorization.ExternalAuthorizationPolicies = policies.AsReadOnly();

                // TO DO : podesavanje AutidBehaviour-a
                ServiceSecurityAuditBehavior newAudit2 = new ServiceSecurityAuditBehavior();
                newAudit2.AuditLogLocation = AuditLogLocation.Application;
                newAudit2.ServiceAuthorizationAuditLevel = AuditLevel.SuccessOrFailure;

                host2.Description.Behaviors.Remove<ServiceSecurityAuditBehavior>();
                host2.Description.Behaviors.Add(newAudit2);

                host2.Open();

                Console.WriteLine(WindowsIdentity.GetCurrent().Name);

                Console.WriteLine("Servis je uspesno pokrenut na adresi " + address);
                Console.WriteLine($"Servis je uspesno pokrenut na endpoint adresi: {address2}");

                ProccesesDB Procesi = new ProccesesDB();
                while (true)
                {
                    try
                    {
                        Procesi.LoadProcesses();
                    }
                    catch(Exception e)
                    {
                        Console.WriteLine(e);
                    }

                    Process[] activeProcesses = Process.GetProcesses();
                    foreach(Process p in activeProcesses)
                    {
                        KeyValuePair<string, CounterAndType> matchingEntry = ProccesesDB.blackListProccesses.FirstOrDefault(entry => p.ProcessName.ToLower().Contains(entry.Key.ToLower()));

                        if (!string.IsNullOrEmpty(matchingEntry.Key))
                        {
                            
                            ProccesesDB.blackListProccesses[matchingEntry.Key].Counter++;
                            if(ProccesesDB.blackListProccesses[matchingEntry.Key].LevelOfSecurity < LevelOfSecurity.Critical)
                            {
                                ProccesesDB.blackListProccesses[matchingEntry.Key].LevelOfSecurity++;
                            }
                            

                            Console.WriteLine($"Match found for process: {p.ProcessName}. Counter updated to: {ProccesesDB.blackListProccesses[matchingEntry.Key].Counter}, {ProccesesDB.blackListProccesses[matchingEntry.Key].LevelOfSecurity.ToString()}");
                        }
                    }
                    Thread.Sleep(N);
                }

                Console.WriteLine();
                Console.ReadKey();
                host.Close();
                host2.Close();
            }
        }
    }
}
