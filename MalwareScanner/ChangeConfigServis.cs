using Common;
using Manager;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.ServiceModel;
using System.Threading;

namespace MalwareScanner
{
    public class ChangeConfigServis : IChangeConfig
    {
        //[PrincipalPermission(SecurityAction.Demand, Role = "AddProcess")]
        public string AddProcess(string process)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("AddProcess"))
            {
                try
                {
                    Audit.AuthorizationSuccess(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                try
                {
                    string fileName = @"..\..\..\MalwareScanner\BlackListMalwareConfig.txt";
                    if(!File.Exists(fileName))
                    {
                        return "ERROR! There is no configuration file!";
                    }
                    bool check = false;
                    StreamReader sr = new StreamReader(fileName);

                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        if (line == process)
                        {
                            sr.Close();
                            check = true;
                            return "Proces vec postoji u konfiguraciji";
                        }
                    }
                    sr.Close();

                    if (!check)
                    {
                        StreamWriter sw = File.AppendText(fileName);
                        sw.WriteLine(process);
                        sw.Close();
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    return "Nije moguce dodati proces";
                }
                Console.WriteLine("Dodat proces " + process);
                return "Proces dodat";
            }
            else
            {
                try
                {
                    Audit.AuthorizationFailed(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action, "AddProcess() method need AddProcess permission.");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                throw new FaultException("User " + userName +
                    " try to call AddProcess method. AddProcess method need AddProcess permission.");
            }
        }

        //[PrincipalPermission(SecurityAction.Demand, Role = "DeleteConfig")]
        public string DeleteConfigurationFile()
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("DeleteConfig"))
            {
                try
                {
                    Audit.AuthorizationSuccess(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                try
                {
                    string fileName = @"..\..\..\MalwareScanner\BlackListMalwareConfig.txt";
                    if (!File.Exists(fileName))
                    {
                        return "ERROR! There is no configuration file!";
                    }
                    File.Delete(fileName);
                    Console.WriteLine("Obrisan konfiguracioni fajl");
                    return "Brisanje uspesno";
                }
                catch (IOException e)
                {
                    Console.WriteLine(e.Message);
                    return "Nije moguce obrisati fajl";
                }
            }
            else
            {
                try
                {
                    Audit.AuthorizationFailed(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action, "DeleteConfig method need DeleteConfig permission.");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                throw new FaultException("User " + userName +
                    " try to call DeleteConfig method. DeleteConfig method need DeleteConfig permission.");
            }
        }

        //[PrincipalPermission(SecurityAction.Demand, Role = "ModifyProcess")]
        public string ModifyProcess(string p1, string p2)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("ModifyProcess"))
            {
                try
                {
                    Audit.AuthorizationSuccess(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                string fileName = @"..\..\..\MalwareScanner\BlackListMalwareConfig.txt";
                if (!File.Exists(fileName))
                {
                    return "ERROR! There is no configuration file!";
                }

                try
                {
                    string text = File.ReadAllText(fileName);
                    if (text.Contains(p2))
                    {
                        text = text.Replace(p2, p1);
                        File.WriteAllText(fileName, text);
                        Console.WriteLine("Proces " + p2 + " zamenjen procesom " + p1);
                        return "Modifikacija uspesna";
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    return "Nije moguce izvrsiti modifikaciju";
                }
                return "Proces se ne nalazi u konfiguraciji";
            }
            else
            {
                try
                {
                    Audit.AuthorizationFailed(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action, "ModifyProcess method need ModifyProcess permission.");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                throw new FaultException("User " + userName +
                    " try to call ModifyProcess method. ModifyProcess method need  ModifyProcess permission.");
            }
        }

        public List<string> ReadConfiguration()
        {
            List<string> List = new List<string>();
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName,
                    OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            try
            {
                string fileName = @"..\..\..\MalwareScanner\BlackListMalwareConfig.txt";
                if (!File.Exists(fileName))
                {
                    List.Add("ERROR! There is no configuration file!");
                    return List;
                }

                using (StreamReader reader = new StreamReader(fileName))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        List.Add(line);
                    }
                }
            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }

            return List;
        }

        // [PrincipalPermission(SecurityAction.Demand, Role = "DeleteProcess")]
        public string DeleteProcess(string process)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            if (Thread.CurrentPrincipal.IsInRole("DeleteProcess"))
            {
                try
                {
                    Audit.AuthorizationSuccess(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                try
                {
                    string fileName = @"..\..\..\MalwareScanner\BlackListMalwareConfig.txt";
                    if (!File.Exists(fileName))
                    {
                        return "ERROR! There is no configuration file!";
                    }
                    List<string> lines = File.ReadAllLines(fileName).ToList();

                    if (lines.Contains(process))
                    {
                        lines.Remove(process);
                        File.WriteAllLines(fileName, lines);
                        Console.WriteLine("Uspesno obrisan proces " + process);
                        return "Uspesno izbrisan proces";
                    }
                }
                catch(Exception e )
                {
                    Console.WriteLine(e.Message);
                    return "Nije moguce obrisati proces";
                }
                return "Proces se ne nalazi u konfiguraciji";
            }
            else
            {
                try
                {
                    Audit.AuthorizationFailed(userName,
                        OperationContext.Current.IncomingMessageHeaders.Action, "DeleteProcess method need DeleteProcess permission.");
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }

                throw new FaultException("User " + userName +
                    " try to call DeleteProcess method. DeleteProcess method need DeleteProcess permission.");
            }
        }
    }
}
